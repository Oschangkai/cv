---
import Section from "../Section.astro";
import { useTranslation, getCVSection } from "@/utils/language-context";
import {
  formatWorkDateRange,
  calculateWorkDuration,
} from "@/utils/date-formatter";

const work = getCVSection("work");
const t = useTranslation();
---

<Section title={t("experience.title")}>
  <ul>
    {
      work.map(
        ({
          name,
          startDate,
          endDate,
          position,
          summary,
          highlights,
          url,
          skills,
        }) => {
          // Use the formatWorkDateRange function to format the date range
          const formattedDateRange = formatWorkDateRange(startDate, endDate, t);
          // Calculate work duration
          const workDuration = calculateWorkDuration(startDate, endDate, t);

          return (
            <li>
              <article>
                <header>
                  <div>
                    <h3>
                      <a href={url} title={`${name}`} target="_blank">
                        {name}
                      </a>
                    </h3>
                    <h4>{position}</h4>
                  </div>

                  <div class="date-info">
                    <time datetime={startDate} data-title={formattedDateRange}>
                      {formattedDateRange}
                    </time>
                    <div class="duration">
                      {`(${workDuration})`}
                      {/* It's a hack to avoid text being cut in print mode */}
                      <span class="print">&nbsp;</span>
                    </div>
                  </div>
                </header>

                <footer>
                  {summary && <p class="summary">{summary}</p>}
                  {highlights && highlights.length > 0 && (
                    <div class="highlights">
                      <p class="highlights-title">
                        {t("experience.highlights.title")}
                      </p>
                      <ul class="highlights-list">
                        {highlights.map((highlight) => (
                          <li class="highlight-item">{highlight}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                  {skills && skills.length > 0 && (
                    <div class="skills">
                      {skills.map((skill) => (
                        <span class="skill-chip">{skill}</span>
                      ))}
                    </div>
                  )}
                </footer>
              </article>
            </li>
          );
        }
      )
    }
  </ul>
</Section>

<style>
  ul {
    display: flex;
    flex-direction: column;
    gap: 32px;
  }

  article h3 {
    font-weight: 500;
    color: var(--heading-primary);
  }

  article a {
    color: var(--link-color);
  }

  article a:hover:is([href]) {
    text-decoration: underline;
    cursor: pointer;
  }

  article h4 {
    color: var(--heading-secondary);
    font-weight: 400;
  }

  header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 8px;
  }

  .date-info {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    gap: 2px;
  }

  time {
    color: var(--time-color);
    font-size: 0.85rem;
    min-width: fit-content;
    cursor: default;
  }

  .duration {
    color: var(--duration-color);
    font-size: 0.75rem;
    font-style: italic;
  }

  /* Preserve line breaks in summary text */
  .summary {
    white-space: pre-line;
  }

  /* Highlights section styling */
  .highlights {
    margin-top: 8px;
  }

  .highlights-title {
    color: var(--highlight-color);
    font-size: 0.9rem;
    font-weight: 500;
    margin-bottom: 6px;
  }

  .highlights-list {
    display: block;
    color: var(--highlight-color);
    font-size: 0.85rem;
    line-height: 1.4rem;
    padding-left: 1rem;
    list-style-type: disc;
    margin-bottom: 0;
  }

  /* Skills section styling */
  .skills {
    display: inline-flex;
    gap: 6px;
    flex-wrap: wrap;
    margin-top: 16px;
  }

  .skill-title {
    color: var(--highlight-color);
    font-size: 0.8rem;
    font-weight: 500;
  }

  .skill-chip {
    align-items: center;
    background: var(--skill-chip-bg);
    border-radius: 6px;
    color: var(--skill-chip-color);
    display: flex;
    font-size: 0.8rem;
    font-weight: 500;
    gap: 4px;
    padding: 0.2rem 0.6rem;
  }

  [data-title]:hover:after {
    opacity: 1;
    transition: all 0.1s ease-in-out 0.5s;
    visibility: visible;
  }

  [data-title]:after {
    content: attr(data-title);
    background-color: var(--tooltip-bg);
    color: var(--tooltip-color);
    font-size: 0.75rem;
    font-family:
      Menlo,
      Monaco,
      Lucida Console,
      "Courier New",
      monospace;
    position: absolute;
    padding: 0.2rem 0.5rem;
    bottom: -1.4rem;
    left: 50%;
    white-space: nowrap;
    box-shadow: 1px 1px 1px var(--tooltip-border);
    opacity: 0;
    border: 1px solid var(--tooltip-border);
    z-index: 99999;
    visibility: hidden;
    border-radius: 6px;
  }

  [data-title] {
    position: relative;
  }

  @media (width <= 700px) {
    time {
      text-align: right;
    }

    .skills {
      gap: 6px;
    }

    .skill-chip {
      font-size: 0.75rem;
      padding: 3px 8px;
    }
  }

  @media print {
    ul {
      gap: 28px;
    }

    .skill-chip {
      background: none;
      border: 1px solid var(--skill-chip-border);
      color: var(--skill-chip-color);
      font-size: 0.75rem;
      padding: 2px 6px;
    }

    .skills {
      margin-top: 4px;
    }

    .highlights-title {
      margin-bottom: 4px;
    }
  }
</style>

---
import Section from "../Section.astro";
import { useTranslation, getCVSection } from "@/utils/language-context";
import { Pin, Department, Arrow } from "@/icons";
import {
  formatWorkDateRange,
  calculateWorkDuration,
} from "@/utils/date-formatter";

const work = getCVSection("work");
const t = useTranslation();
---

<Section title={t("experience.title")}>
  <ul>
    {
      work.map(
        ({
          name,
          startDate,
          endDate,
          position,
          department,
          summary,
          highlights,
          details,
          url,
          skills,
          location,
        }) => {
          // Use the formatWorkDateRange function to format the date range
          const formattedDateRange = formatWorkDateRange(startDate, endDate, t);
          // Calculate work duration
          const workDuration = calculateWorkDuration(startDate, endDate, t);

          return (
            <li>
              <article>
                <header>
                  <div>
                    <h3>
                      <a href={url} title={`${name}`} target="_blank">
                        {name}
                      </a>
                      {location && (
                        <span class="location no-print desktop">
                          <span class="location-icon">
                            <Pin />
                          </span>
                          {location}
                        </span>
                      )}
                    </h3>
                    <h4>
                      {position}
                      {department && (
                        <span class="department desktop">
                          <span class="department-icon">
                            <Department />
                          </span>
                          {department}
                        </span>
                      )}
                    </h4>
                  </div>

                  <div class="date-info">
                    <time datetime={startDate} data-title={formattedDateRange}>
                      {formattedDateRange}
                    </time>
                    <div class="duration">
                      {`(${workDuration})`}
                      {/* It's a hack to avoid text being cut in print mode */}
                      <span class="print">&nbsp;</span>
                    </div>
                  </div>
                </header>

                <footer>
                  {summary && <p class="summary">{summary}</p>}
                  {highlights && highlights.length > 0 && (
                    <div class="highlights">
                      <p class="highlights-title">
                        {t("experience.highlights.title")}
                      </p>
                      <ul class="highlights-list">
                        {highlights.map((highlight) => (
                          <li class="highlight-item">{highlight}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                  {details && details.length > 0 && (
                    <div class="details no-print">
                      <p class="details-title">
                        {t("experience.details.title")}
                      </p>
                      <ul class="details-list">
                        {details.map((detail) => (
                          <li class="highlight-item">{detail}</li>
                        ))}
                      </ul>
                      {/* prettier-ignore */}
                      <button type="button" class="show-more-btn" onclick="toggleDetails(this)" data-show-more-text={t("show_more")} data-show-less-text={t("show_less")}>
                        {t("show_more")}<Arrow class={["toggle-icon"]} />
                      </button>
                    </div>
                  )}
                  {skills && skills.length > 0 && (
                    <div class="skills">
                      {skills.map((skill) => (
                        <span class="skill-chip">{skill}</span>
                      ))}
                    </div>
                  )}
                </footer>
              </article>
            </li>
          );
        }
      )
    }
  </ul>
</Section>

<style>
  ul {
    display: flex;
    flex-direction: column;
    gap: 32px;
  }

  article h3 {
    font-weight: 500;
    color: var(--heading-primary);
    display: flex;
    align-items: center;
    gap: 1.1rem;
  }

  article a {
    color: var(--link-color);
  }

  article a:hover:is([href]) {
    text-decoration: underline;
    cursor: pointer;
  }

  .location {
    color: var(--duration-color);
    font-weight: 400;
    display: flex;
    align-items: center;
    font-size: 0.7rem;
    visibility: hidden;
    opacity: 0;
    transition:
      visibility 0s,
      opacity 0.7s ease;
  }

  .location-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 0.6rem;
    height: 0.6rem;
    margin-right: 0.3rem;
  }

  article:hover .location {
    visibility: visible;
    opacity: 1;
  }

  article h4 {
    color: var(--heading-secondary);
    font-weight: 400;
    display: flex;
    align-items: baseline;
    gap: 1.1rem;
  }

  .department {
    color: var(--duration-color);
    display: flex;
    align-items: center;
    font-size: 0.7rem;
    visibility: hidden;
    opacity: 0;
    transition:
      visibility 0s,
      opacity 0.7s ease;
  }
  .department-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 0.7rem;
    height: 0.7rem;
    margin-right: 0.3rem;
  }

  article:hover .department {
    visibility: visible;
    opacity: 1;
  }

  header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 8px;
  }

  .date-info {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    gap: 2px;
  }

  time {
    color: var(--time-color);
    font-size: 0.85rem;
    min-width: fit-content;
    cursor: default;
  }

  .duration {
    color: var(--duration-color);
    font-size: 0.75rem;
    font-style: italic;
  }

  /* Preserve line breaks in summary text */
  .summary {
    white-space: pre-line;
  }

  /* Highlights section styling */
  .highlights {
    margin-top: 8px;
  }

  .highlights-title {
    color: var(--highlight-color);
    font-size: 0.9rem;
    font-weight: 500;
    margin-bottom: 6px;
  }

  .highlights-list {
    display: block;
    color: var(--highlight-color);
    font-size: 0.85rem;
    line-height: 1.4rem;
    padding-left: 1rem;
    list-style-type: disc;
    margin-bottom: 0;
  }

  /* Details section styling */
  .details {
    margin-top: 8px;
    position: relative;
    max-height: 0.675; /* Show about half of title height, slightly more visible */
  }

  .details::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0; /* Align with the text, accounting for padding */
    right: 0;
    height: 1.35rem; /* Same as line-height of highlights */
    background: linear-gradient(to bottom, transparent 0%, var(--bg-color) 80%);
    pointer-events: none;
  }

  .details-title {
    color: var(--highlight-color);
    font-size: 0.9rem;
    font-weight: 500;
  }

  .details-list {
    display: block;
    color: var(--highlight-color);
    font-size: 0.85rem;
    line-height: 1.4rem;
    padding-left: 1rem;
    list-style-type: disc;
    margin-bottom: 0.5rem;
    position: relative;
    max-height: 0rem;
    overflow: hidden;
  }

  .show-more-btn {
    background: none;
    border: none;
    color: var(--highlight-color);
    font-size: 0.85rem;
    cursor: pointer;
  }

  .show-more-btn:hover {
    color: var(--text-color);
  }

  :global(.toggle-icon) {
    width: 12px;
    height: 12px;
    transition: transform 0.2s ease;
    transform: rotate(180deg);
    display: inline-block;
    margin-left: 0.2rem;
  }

  .details.expanded::after {
    opacity: 0;
  }

  .details.expanded .details-title {
    margin-bottom: 6px;
  }

  .details.expanded .details-list {
    max-height: none;
    margin-bottom: 0.8rem;
    overflow: visible;
  }

  .details.expanded :global(.toggle-icon) {
    transform: rotate(0deg);
  }

  /* Skills section styling */
  .skills {
    display: inline-flex;
    gap: 6px;
    flex-wrap: wrap;
    margin-top: 16px;
  }

  .skill-title {
    color: var(--highlight-color);
    font-size: 0.8rem;
    font-weight: 500;
  }

  .skill-chip {
    align-items: center;
    background: var(--skill-chip-bg);
    border-radius: 6px;
    color: var(--skill-chip-color);
    display: flex;
    font-size: 0.8rem;
    font-weight: 500;
    gap: 4px;
    padding: 0.2rem 0.6rem;
  }

  [data-title]:hover:after {
    opacity: 1;
    transition: all 0.1s ease-in-out 0.5s;
    visibility: visible;
  }

  [data-title]:after {
    content: attr(data-title);
    background-color: var(--tooltip-bg);
    color: var(--tooltip-color);
    font-size: 0.75rem;
    font-family:
      Menlo,
      Monaco,
      Lucida Console,
      "Courier New",
      monospace;
    position: absolute;
    padding: 0.2rem 0.5rem;
    bottom: -1.4rem;
    left: 50%;
    white-space: nowrap;
    box-shadow: 1px 1px 1px var(--tooltip-border);
    opacity: 0;
    border: 1px solid var(--tooltip-border);
    z-index: 99999;
    visibility: hidden;
    border-radius: 6px;
  }

  [data-title] {
    position: relative;
  }

  @media (width <= 700px) {
    time {
      text-align: right;
    }

    .skills {
      gap: 6px;
    }

    .skill-chip {
      font-size: 0.75rem;
      padding: 3px 8px;
    }
  }

  @media print {
    ul {
      gap: 28px;
    }

    .skill-chip {
      background: none;
      border: 1px solid var(--skill-chip-border);
      color: var(--skill-chip-color);
      font-size: 0.75rem;
      padding: 2px 6px;
    }

    .skills {
      margin-top: 4px;
    }

    .highlights-title {
      margin-bottom: 4px;
    }
  }
</style>
<script is:inline>
  function toggleDetails(button) {
    const container = button.closest(".details");
    if (!container) return;

    const isExpanded = container.classList.contains("expanded");
    const showMoreText = button.dataset.showMoreText || "Show more";
    const showLessText = button.dataset.showLessText || "Show less";

    // Toggle the expanded class
    container.classList.toggle("expanded");

    // Update only the text content, not the entire innerHTML
    const textNode = button.firstChild;
    if (textNode && textNode.nodeType === Node.TEXT_NODE) {
      if (isExpanded) {
        textNode.textContent = showMoreText;
      } else {
        textNode.textContent = showLessText;
      }
    }
  }
</script>

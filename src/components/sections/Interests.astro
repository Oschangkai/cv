---
import Section from "../Section.astro";
import { useTranslation, getCVSection } from "@/utils/language-context";

const interests = getCVSection("interests");
const t = useTranslation();
---

<Section title={t("interests.title")}>
  <ul>
    {
      interests.map(({ name, summary, highlights, keywords }) => {
        const hasHighlights = highlights && highlights.length > 0;
        const hasKeywords = keywords && keywords.length > 0;

        return (
          <li>
            <article>
              <header>
                <h3>{name}</h3>
              </header>

              <footer>
                {summary && <p class="summary">{summary}</p>}

                {hasHighlights && (
                  <div class="highlights-section">
                    <ul class="highlights-list">
                      {highlights.map((highlight) => (
                        <li class="highlight-item">{highlight}</li>
                      ))}
                    </ul>
                  </div>
                )}

                {hasKeywords && (
                  <div class="keywords">
                    {keywords.map((keyword) => (
                      <span class="keyword-tag">{keyword}</span>
                    ))}
                  </div>
                )}
              </footer>
            </article>
          </li>
        );
      })
    }
  </ul>
</Section>

<style>
  ul {
    display: flex;
    flex-direction: column;
    gap: 32px;
  }

  article h3 {
    font-weight: 500;
    color: var(--heading-primary);
  }

  article a {
    color: var(--link-color);
  }

  article a:hover:is([href]) {
    text-decoration: underline;
    cursor: pointer;
  }

  article h4 {
    color: var(--heading-secondary);
    font-weight: 400;
  }

  header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
  }

  .summary {
    white-space: pre-line;
  }

  .highlights-section {
    margin-top: 8px;
  }

  .highlights-list {
    display: block;
    color: var(--highlight-color);
    font-size: 0.85rem;
    line-height: 1.4rem;
    padding-left: 1rem;
    list-style-type: disc;
    margin: 0;
  }

  .keywords {
    display: inline-flex;
    gap: 6px;
    flex-wrap: wrap;
    margin-top: 16px;
  }

  .keyword-tag {
    align-items: center;
    background: var(--skill-chip-bg);
    border-radius: 6px;
    color: var(--skill-chip-color);
    display: flex;
    font-size: 0.8rem;
    font-weight: 500;
    gap: 4px;
    padding: 0.2rem 0.6rem;
  }

  @media (width <= 700px) {
    .keywords {
      gap: 6px;
    }

    .keyword-tag {
      font-size: 0.75rem;
      padding: 3px 8px;
    }
  }

  /* Print styles */
  @media print {
    article {
      border: none;
      background: transparent;
      padding: 0;
      margin-bottom: 20px;
      box-shadow: none;
      transform: none;
    }

    article h3 {
      font-size: 1rem;
      margin-bottom: 8px;
    }

    .content {
      gap: 8px;
    }

    .summary {
      font-size: 0.9rem;
    }

    .highlights-list {
      font-size: 0.85rem;
      padding-left: 0.8rem;
    }

    .keywords {
      gap: 4px;
      margin-top: 8px;
    }

    .keyword-tag {
      background: none;
      border: 1px solid var(--skill-chip-border);
      color: var(--skill-chip-color);
      font-size: 0.75rem;
      padding: 2px 6px;
    }
  }
</style>

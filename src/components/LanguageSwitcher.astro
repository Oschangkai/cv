---
import { i18nConfig } from "@astro.config";
import { WorldMap } from "@/icons";
import {
  useTranslation,
  getSelectedLang,
  getAvailableLanguages,
} from "@/utils/language-context";

// Use the user selected language for display, not the CV fallback language
const selectedLang = getSelectedLang();
const t = useTranslation();

// Get all available languages dynamically (UI languages + CV files)
const availableLanguages = await getAvailableLanguages();
---

<div class="language-switcher no-print">
  <button
    id="language-toggle"
    class="language-button"
    aria-label={t("language.switch")}
    title={t("language.switch")}
  >
    <span class="language-icon">
      <WorldMap />
    </span>
    <span class="current-lang"
      >{
        i18nConfig.languageNames[
          selectedLang as keyof typeof i18nConfig.languageNames
        ] || selectedLang
      }</span
    >
    <svg
      class="chevron"
      width="12"
      height="12"
      viewBox="0 0 12 12"
      fill="currentColor"
    >
      <path
        d="M2 4l4 4 4-4"
        stroke="currentColor"
        stroke-width="1.5"
        fill="none"
        stroke-linecap="round"
        stroke-linejoin="round"></path>
    </svg>
  </button>

  <div class="language-dropdown" id="language-dropdown">
    {
      availableLanguages.map((lang) => (
        <a
          href={`/${lang}`}
          class={`language-option ${lang === selectedLang ? "active" : ""}`}
          data-lang={lang}
        >
          <span class="lang-name">
            {i18nConfig.languageNames[
              lang as keyof typeof i18nConfig.languageNames
            ] || lang}
          </span>
          <span class="lang-code">{lang.toUpperCase()}</span>
        </a>
      ))
    }
  </div>
</div>

<script>
  // Language selection memory
  const STORAGE_KEY = "preferred-language";

  // Save language preference
  function storeLanguage(lang: string): void {
    if (typeof localStorage !== "undefined") {
      localStorage.setItem(STORAGE_KEY, lang);
    }
  }

  // When the page loads, initialize the language switcher
  document.addEventListener("DOMContentLoaded", () => {
    const toggle = document.getElementById("language-toggle");
    const dropdown = document.getElementById("language-dropdown");

    if (!toggle || !dropdown) return;

    // Switch the dropdown menu
    toggle.addEventListener("click", (e) => {
      e.stopPropagation();
      dropdown.classList.toggle("show");
    });

    // Click other places to close the dropdown menu
    document.addEventListener("click", () => {
      dropdown.classList.remove("show");
    });

    // Prevent the dropdown menu from closing when clicked
    dropdown.addEventListener("click", (e) => {
      e.stopPropagation();
    });

    // Handle language selection
    const languageOptions = dropdown.querySelectorAll(".language-option");
    languageOptions.forEach((option) => {
      option.addEventListener("click", (e) => {
        e.preventDefault();
        const lang = (e.currentTarget as HTMLElement).dataset.lang;
        if (lang) {
          storeLanguage(lang);
          window.location.href = `/${lang}`;
        }
      });
    });
  });
</script>

<style>
  .language-switcher {
    position: relative;
  }

  .language-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 15px;
    height: 15px;
  }

  .language-button {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.1rem 0.3rem;
    background: var(--component-bg);
    backdrop-filter: blur(2px);
    border: 1px solid var(--border-color);
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.9rem;
    color: var(--text-color);
    transition: all 0.2s ease;
    font-family: inherit;
  }

  .language-button:hover {
    gap: 0.35rem;
    background: var(--component-hover-bg);
    border-color: var(--gray);
  }

  .current-lang {
    font-weight: 500;
    margin-left: 0.35rem;
    transition: all 0.2s ease;
  }

  .language-button:hover .current-lang {
    margin-left: 0;
  }

  .chevron {
    opacity: 0;
    width: 0;
    overflow: hidden;
    transition: all 0.2s ease;
  }

  .language-button:hover .chevron {
    opacity: 1;
    width: 12px;
  }

  /* when the dropdown is shown, the chevron should be rotated and the gap should be 0.3rem */
  .language-switcher:has(.language-dropdown.show) .chevron {
    opacity: 1;
    width: 12px;
    transform: rotate(180deg);
  }

  .language-switcher:has(.language-dropdown.show) .language-button {
    gap: 0.35rem;
  }

  .language-switcher:has(.language-dropdown.show) .current-lang {
    margin-left: 0;
  }

  .language-dropdown {
    position: absolute;
    top: calc(100% + 0.5rem);
    right: 0;
    min-width: 180px;
    background: var(--component-dropdown-bg);
    backdrop-filter: blur(2px);
    border: 1px solid var(--component-dropdown-border);
    border-radius: 8px;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-8px);
    transition: all 0.2s ease;
  }

  .language-dropdown.show {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .language-option {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.75rem 1rem;
    color: var(--text-color);
    text-decoration: none;
    border-bottom: 1px solid var(--border-color);
    transition: background-color 0.2s ease;
  }

  .language-option:first-child {
    border-radius: 8px 8px 0 0;
  }

  .language-option:last-child {
    border-bottom: none;
    border-radius: 0 0 8px 8px;
  }

  .language-option:hover {
    background: var(--component-dropdown-current-bg);
  }

  .language-option.active {
    background: var(--component-dropdown-option-hover-bg);
    color: var(--component-dropdown-active-color);
  }

  .lang-name {
    font-weight: 500;
  }

  .lang-code {
    font-size: 0.65rem;
    color: var(--text-secondary);
    font-family: Menlo, Monaco, "Lucida Console", "Courier New", monospace;
  }

  .language-option.active .lang-code {
    color: var(--component-dropdown-active-color);
  }

  @media (max-width: 600px) {
    .language-button {
      padding: 0.5rem;
      font-size: 0.8rem;
    }

    .language-icon {
      width: 16px;
      height: 16px;
    }

    .current-lang {
      display: none;
    }

    .language-dropdown {
      min-width: 160px;
    }
  }

  /* Hide when printing */
  @media print {
    .language-switcher {
      display: none !important;
    }
  }
</style>

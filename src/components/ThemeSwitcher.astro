---
import { LightTheme, DarkTheme, AutoTheme } from "@/icons";
import { getSelectedLang, useTranslation } from "@/utils/language-context";

const t = useTranslation();
const selectedLang = getSelectedLang();

// Theme options for the dropdown
const themeOptions = [
  { value: "light", label: t("theme.light") || "Light", icon: LightTheme },
  { value: "dark", label: t("theme.dark") || "Dark", icon: DarkTheme },
  { value: "auto", label: t("theme.auto") || "Auto", icon: AutoTheme },
];
---

<div class="theme-switcher no-print">
  <button
    id="theme-button"
    class="theme-button"
    aria-label={t("theme.toggle") || "Toggle theme"}
    title={t("theme.toggle") || "Toggle theme"}
  >
    {
      themeOptions.map((option) => (
        <span class="theme-icon" data-theme={option.value}>
          <option.icon />
        </span>
      ))
    }
    <!-- Current theme icon -->

    <!-- Current theme label -->
    <span class="current-theme">{t("theme.light") || "Light"}</span>
    <!-- Chevron -->
    <svg
      class="chevron"
      width="12"
      height="12"
      viewBox="0 0 12 12"
      fill="currentColor"
    >
      <path
        d="M2 4l4 4 4-4"
        stroke="currentColor"
        stroke-width="1.5"
        fill="none"
        stroke-linecap="round"
        stroke-linejoin="round"></path>
    </svg>
  </button>

  <div class="theme-dropdown" id="theme-dropdown">
    {
      themeOptions.map((option) => (
        <button class="theme-option" data-theme={option.value}>
          <span class="theme-option-icon">
            <option.icon />
          </span>
          <span class="theme-option-label">{option.label}</span>
        </button>
      ))
    }
  </div>
</div>

<script define:vars={{ themeOptions, selectedLang }}>
  // Theme management constants
  const STORAGE_KEY = "preferred-theme";
  const DARK_CLASS = "dark-theme";

  // Get theme preference from localStorage or default to auto
  function getStoredTheme() {
    if (typeof localStorage !== "undefined") {
      return localStorage.getItem(STORAGE_KEY) || "auto";
    }
    return "auto";
  }

  // Save theme preference to localStorage
  function storeTheme(theme) {
    if (typeof localStorage !== "undefined") {
      localStorage.setItem(STORAGE_KEY, theme);
    }
  }

  // Get system theme preference
  function getSystemTheme() {
    if (typeof window !== "undefined" && window.matchMedia) {
      return window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
    }
    return "light";
  }

  // Get the actual theme to apply (resolves 'auto' to system preference)
  function getEffectiveTheme(theme) {
    return theme === "auto" ? getSystemTheme() : theme;
  }

  // Update the UI to show current theme
  function updateThemeUI(currentTheme) {
    const themeButton = document.getElementById("theme-button");
    const currentThemeSpan = themeButton?.querySelector(".current-theme");
    const themeIcons = themeButton?.querySelectorAll(".theme-icon");

    if (!themeButton || !currentThemeSpan) return;

    const themeInfo = themeOptions.find(
      (option) => option.value === currentTheme
    );

    if (themeInfo) {
      // Update label
      currentThemeSpan.textContent = themeInfo.label;

      // Update icon
      themeIcons.forEach((icon) => {
        icon.classList.toggle(
          "current-theme-icon",
          icon.getAttribute("data-theme") === currentTheme
        );
      });
    }

    // Update dropdown active state
    const dropdown = document.getElementById("theme-dropdown");
    if (dropdown) {
      const options = dropdown.querySelectorAll(".theme-option");
      options.forEach((option) => {
        const optionTheme = option.dataset.theme;
        option.classList.toggle("active", optionTheme === currentTheme);
      });
    }
  }

  // Apply theme to document
  function applyTheme(theme) {
    const effectiveTheme = getEffectiveTheme(theme);
    const isDark = effectiveTheme === "dark";

    document.documentElement.classList.toggle(DARK_CLASS, isDark);
    updateThemeUI(theme);
  }

  // Set theme and save preference
  function setTheme(theme) {
    storeTheme(theme);
    applyTheme(theme);
  }

  // Initialize theme when page loads
  document.addEventListener("DOMContentLoaded", () => {
    const themeButton = document.getElementById("theme-button");
    const dropdown = document.getElementById("theme-dropdown");

    if (!themeButton || !dropdown) return;

    // Apply stored theme on page load
    const storedTheme = getStoredTheme();
    applyTheme(storedTheme);

    // Toggle dropdown on button click
    themeButton.addEventListener("click", (e) => {
      e.stopPropagation();
      dropdown.classList.toggle("show");
    });

    // Close dropdown when clicking outside
    document.addEventListener("click", () => {
      dropdown.classList.remove("show");
    });

    // Prevent dropdown from closing when clicking inside
    dropdown.addEventListener("click", (e) => {
      e.stopPropagation();
    });

    // Handle theme option selection
    const themeOptionButtons = dropdown.querySelectorAll(".theme-option");
    themeOptionButtons.forEach((button) => {
      button.addEventListener("click", (e) => {
        const selectedTheme = e.currentTarget.dataset.theme;
        if (selectedTheme) {
          setTheme(selectedTheme);
          dropdown.classList.remove("show");
        }
      });
    });

    // Listen for system theme changes when auto mode is selected
    if (window.matchMedia) {
      const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
      mediaQuery.addEventListener("change", () => {
        const currentTheme = getStoredTheme();
        if (currentTheme === "auto") {
          applyTheme(currentTheme);
        }
      });
    }
  });

  // Apply theme immediately (before DOMContentLoaded) to prevent flash
  const initialTheme = getStoredTheme();
  applyTheme(initialTheme);
</script>

<style>
  .theme-switcher {
    position: relative;
  }

  .theme-button {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.1rem 0.3rem;
    background: var(--component-bg);
    backdrop-filter: blur(2px);
    border: 1px solid var(--border-color);
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.9rem;
    color: var(--text-color);
    transition: all 0.2s ease;
    font-family: inherit;
  }

  .theme-button:hover {
    gap: 0.35rem;
    background: var(--component-hover-bg);
    border-color: var(--gray);
  }

  .theme-icon {
    display: none;
  }
  .current-theme-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 16px;
    height: 16px;
  }

  .current-theme {
    font-weight: 500;
    transition: all 0.2s ease;
    opacity: 0;
    width: 0;
    overflow: hidden;
    white-space: nowrap;
  }

  .theme-button:hover .current-theme {
    margin-left: 0;
    /* Show text on hover */
    opacity: 1;
    width: auto;
  }

  .chevron {
    opacity: 0;
    width: 0;
    overflow: hidden;
    transition: all 0.2s ease;
  }

  .theme-button:hover .chevron {
    opacity: 1;
    width: 12px;
  }

  /* When the dropdown is shown, the chevron should be rotated and the gap should be 0.3rem */
  .theme-switcher:has(.theme-dropdown.show) .chevron {
    opacity: 1;
    width: 12px;
    transform: rotate(180deg);
  }

  .theme-switcher:has(.theme-dropdown.show) .theme-button {
    gap: 0.35rem;
  }

  .theme-switcher:has(.theme-dropdown.show) .current-theme {
    margin-left: 0;
    opacity: 1;
    width: auto;
    margin-left: 0.35rem;
  }

  .theme-dropdown {
    position: absolute;
    top: calc(100% + 0.5rem);
    right: 0;
    min-width: 90px;
    background: var(--component-dropdown-bg);
    backdrop-filter: blur(2px);
    border: 1px solid var(--component-dropdown-border);
    border-radius: 8px;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-8px);
    transition: all 0.2s ease;
    z-index: 100;
  }

  .theme-dropdown.show {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .theme-option {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    gap: 0.75rem;
    padding: 0.75rem 1rem;
    width: 100%;
    background: none;
    border: none;
    color: var(--text-color);
    text-decoration: none;
    border-bottom: 1px solid var(--border-color);
    transition: background-color 0.2s ease;
    cursor: pointer;
    font-family: inherit;
    font-size: 0.9rem;
  }

  .theme-option:first-child {
    border-radius: 8px 8px 0 0;
  }

  .theme-option:last-child {
    border-bottom: none;
    border-radius: 0 0 8px 8px;
  }

  .theme-option:hover {
    background: var(--component-dropdown-current-bg);
  }

  .theme-option.active {
    background: var(--component-dropdown-option-hover-bg);
    color: var(--component-dropdown-active-color);
  }

  .theme-option-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 16px;
    height: 16px;
    flex-shrink: 0;
  }

  .theme-option-label {
    font-weight: 500;
  }

  @media (max-width: 600px) {
    .theme-button {
      padding: 0.5rem;
      font-size: 0.8rem;
    }

    .current-theme {
      display: none;
    }

    .theme-dropdown {
      min-width: 160px;
    }
  }

  /* Hide when printing */
  @media print {
    .theme-switcher {
      display: none !important;
    }
  }
</style>

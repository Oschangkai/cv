---
import { getAvailableLanguages } from "@/utils/language-context";

// Define all supported language static paths dynamically
export async function getStaticPaths() {
  return (await getAvailableLanguages()).map((lang) => ({
    params: { lang },
  }));
}

import Layout from "@/layouts/Layout.astro";

import About from "@/components/sections/About.astro";
import Education from "@/components/sections/Education.astro";
import Experience from "@/components/sections/Experience.astro";
import Hero from "@/components/sections/Hero.astro";
import Projects from "@/components/sections/Projects.astro";
import Skills from "@/components/sections/Skills.astro";
import Certificates from "@/components/sections/Certificates.astro";
import Interests from "@/components/sections/Interests.astro";
import KeyboardManager from "@/components/KeyboardManager.astro";
import HeaderActions from "@/components/HeaderActions.astro";
import { initializeLanguageContext } from "@/utils/language-context";
import { getSectionVisibility } from "@/utils/section-utils";

const { lang } = Astro.params;

const { cvData, t, cvLang, selectedLang } =
  await initializeLanguageContext(lang);
const { basics } = cvData;
const { name, label, image, summary, url } = basics;

// Check which sections have content and should be visible
const sectionVisibility = getSectionVisibility(cvData);
---

<Layout
  title={`${t("portfolio.title")} ${name} - ${label}`}
  summary={summary}
  image={image}
  url={url}
  currentLang={selectedLang}
>
  <HeaderActions />
  <main>
    <Hero />
    {sectionVisibility.about && <About />}
    {sectionVisibility.skills && <Skills />}
    {sectionVisibility.education && <Education />}
    {sectionVisibility.experience && <Experience />}
    {sectionVisibility.interests && <Interests />}
    {sectionVisibility.projects && <Projects />}
    {sectionVisibility.certificates && <Certificates />}
  </main>

  <KeyboardManager />

  <!-- Automatically record the user selected language to localStorage -->
  <script define:vars={{ lang: selectedLang }}>
    // When the page loads, record the user selected language
    if (typeof localStorage !== "undefined" && lang) {
      const STORAGE_KEY = "preferred-language";
      localStorage.setItem(STORAGE_KEY, lang);
    }
  </script>
</Layout>

<style>
  main {
    padding: 4rem;
    margin: auto;
    max-width: 100%;
    /* Use box-sizing: border-box to ensure padding doesn't increase total width */
    box-sizing: border-box;
  }

  @media (width >= 1460px) {
    main {
      padding: 4rem 2rem;
    }
  }

  @media (width <= 700px) {
    main {
      padding: 2rem;
    }
  }

  @media print {
    main {
      padding: 0;
    }
  }
</style>
